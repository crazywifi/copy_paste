Observation: Outdated TLS Protocols in Use
Analysis
During the penetration testing assessment, it was observed that the server-side SSL/TLS endpoint was configured to allow connections using TLS protocol versions 1.0 ("TLSv1.0") and 1.1 ("TLSv1.1"). These protocol versions are outdated and contain known security weaknesses.

The TLS protocol is designed to provide secure transport between endpoints over a network by ensuring data integrity and confidentiality. However, certain configurations of TLSv1.0 were found to be vulnerable to known man-in-the-middle (MITM) attacks, including the BEAST and POODLE attacks. Additionally, multiple standards organizations, including NIST and PCI, have declared that TLSv1.0 no longer provides sufficient data protection.

Weaknesses in TLSv1.0 and TLSv1.1 connections could have allowed an attacker to decrypt traffic between a victim’s client and the server. Any sensitive information transmitted over these connections, such as credentials, account data, personally identifiable information (PII), and financial records, may have been exposed. Furthermore, exposure of session identifiers could have enabled an attacker to hijack a victim’s session, impersonate them in the application, or modify data in transit, leading to potential data manipulation.

Resolution
To mitigate this risk, it is recommended to update the server-side TLS endpoint configuration to allow only TLSv1.3 and TLSv1.2 connections with strong cipher suites.

TLS v1.3 is the latest standard that only supports strong ciphers with authenticated encryption (AEAD).
TLS v1.2 should be enabled for backward compatibility with clients that do not yet support TLS v1.3. However, to ensure strong security, TLS v1.2 must be configured with the following best practices:
Use Elliptic Curve Diffie-Hellman Ephemeral (ECDHE) for key exchange to support Forward Secrecy.
Use block ciphers (e.g., AES) in GCM mode (avoid CBC mode).
An example of a secure cipher suite following these recommendations is:
TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (also known as ECDHE-ECDSA-AES128-GCM-SHA256).

Implementing these changes will enhance the security of data in transit, protect against MITM attacks, and ensure compliance with industry standards.
